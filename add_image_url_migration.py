#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è image_url –≤ —Ç–∞–±–ª–∏—Ü—É events
"""

import sys
import os
from sqlalchemy import create_engine, text
from config import Config

def get_database_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è Heroku"""
    database_url = Config.DATABASE_URL
    
    if not database_url or database_url == 'sqlite:///./test.db':
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
        print("üîó –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite")
        return 'sqlite:///./test.db'
    
    # Heroku –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ postgres://, –Ω–æ SQLAlchemy 1.4+ —Ç—Ä–µ–±—É–µ—Ç postgresql://
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
        print("üîó Heroku PostgreSQL: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω postgres:// -> postgresql://")
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {database_url.split('@')[0]}@***")
    return database_url

def run_migration():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è image_url"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è image_url –≤ —Ç–∞–±–ª–∏—Ü—É events...")
    
    database_url = get_database_url()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ engine –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î
    if database_url.startswith('sqlite'):
        # SQLite –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        engine = create_engine(database_url, echo=True)
    else:
        # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        engine = create_engine(
            database_url,
            pool_pre_ping=True,
            pool_recycle=300,
            echo=True
        )
    
    try:
        with engine.connect() as connection:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ image_url
            if database_url.startswith('sqlite'):
                # SQLite –ø—Ä–æ–≤–µ—Ä–∫–∞
                result = connection.execute(text("PRAGMA table_info(events)"))
                columns = [row[1] for row in result.fetchall()]
                if 'image_url' in columns:
                    print("‚úÖ –ü–æ–ª–µ image_url —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ events")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è SQLite
                connection.execute(text("ALTER TABLE events ADD COLUMN image_url VARCHAR(500)"))
                connection.commit()
                
            else:
                # PostgreSQL –ø—Ä–æ–≤–µ—Ä–∫–∞
                result = connection.execute(text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'events' AND column_name = 'image_url'
                """))
                
                if result.fetchone():
                    print("‚úÖ –ü–æ–ª–µ image_url —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ events")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è PostgreSQL
                connection.execute(text("ALTER TABLE events ADD COLUMN image_url VARCHAR(500)"))
                connection.commit()
            
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ü–æ–ª–µ image_url –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É events")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    run_migration()
