import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from sqlalchemy.orm import Session
from database.models import User, Event, Registration, get_db
from config import Config
from bot.scheduler import NotificationScheduler
from bot.registration_flow import RegistrationFlow

logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.bot_token = Config.BOT_TOKEN
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        self.app = Application.builder().token(self.bot_token).build()
        self.scheduler = NotificationScheduler(self.app.bot)
        self.registration_flow = RegistrationFlow()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("events", self.events_command))
        self.app.add_handler(CommandHandler("my_events", self.my_events_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("profile", self.profile_command))
        
        # Callback handlers
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db = next(get_db())
        try:
            existing_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not existing_user:
                # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                message, reply_markup = self.registration_flow.start_registration(user.id)
                await update.message.reply_text(message, reply_markup=reply_markup)
            else:
                if existing_user.is_profile_complete:
                    message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {existing_user.full_name or user.first_name}! üòä\n\n"
                    message += "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                    message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üëã\n\n"
                    message += "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º:\n\n"
                    message += "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ø–æ–ª–Ω–æ–µ –∏–º—è)"
                    self.registration_flow.user_states[user.id] = {
                        'step': self.registration_flow.RegistrationStep.FULL_NAME,
                        'data': {}
                    }
                
                await update.message.reply_text(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await update.message.reply_text(message)
        finally:
            db.close()
    
    async def events_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            events = db.query(Event).filter(Event.event_datetime > datetime.utcnow()).all()
            
            if not events:
                await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
                return
            
            message = "üóì –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
            keyboard = []
            
            for event in events:
                event_date = event.event_datetime.strftime("%d.%m.%Y %H:%M")
                spots_left = event.available_spots
                
                message += f"üìÖ {event.title}\n"
                message += f"üìù {event.description[:100]}{'...' if len(event.description) > 100 else ''}\n"
                message += f"üïê {event_date}\n"
                message += f"üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {spots_left}\n\n"
                
                if not event.is_full:
                    keyboard.append([InlineKeyboardButton(
                        f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ '{event.title[:30]}...'",
                        callback_data=f"register_{event.id}"
                    )])
                else:
                    keyboard.append([InlineKeyboardButton(
                        f"'{event.title[:30]}...' - –ó–ê–ü–û–õ–ù–ï–ù–û",
                        callback_data=f"full_{event.id}"
                    )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        finally:
            db.close()
    
    async def my_events_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            registrations = db.query(Registration).filter(Registration.user_id == user_obj.id).all()
            
            if not registrations:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
                return
            
            message = "üìã –í–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
            keyboard = []
            
            for reg in registrations:
                event = reg.event
                event_date = event.event_datetime.strftime("%d.%m.%Y %H:%M")
                reg_date = reg.registration_time.strftime("%d.%m.%Y %H:%M")
                
                message += f"üìÖ {event.title}\n"
                message += f"üïê {event_date}\n"
                message += f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date}\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"–û—Ç–º–µ–Ω–∏—Ç—å '{event.title[:30]}...'",
                    callback_data=f"cancel_{reg.id}"
                )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
        finally:
            db.close()
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
ü§ñ AI Community Bot - –ü–æ–º–æ—â—å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
/events - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
/my_events - –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ (–∏–º—è, –∫–æ–º–ø–∞–Ω–∏—è, —Ä–æ–ª—å, –æ–ø—ã—Ç —Å –ò–ò, email)
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
4. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /my_events
6. –û—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
7. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile

–ó–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!
        """
        await update.message.reply_text(help_text)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user = update.effective_user
        
        if data.startswith("register_"):
            await self.handle_registration(query, user, data)
        elif data.startswith("cancel_"):
            await self.handle_cancellation(query, user, data)
        elif data.startswith("full_"):
            await query.edit_message_text("–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
        elif data.startswith("ai_exp_"):
            await self.handle_ai_experience_selection(query, user, data)
    
    async def handle_registration(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
        event_id = int(data.split("_")[1])
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await query.edit_message_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            event = db.query(Event).filter(Event.id == event_id).first()
            if not event:
                await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
            existing_reg = db.query(Registration).filter(
                Registration.user_id == user_obj.id,
                Registration.event_id == event_id
            ).first()
            
            if existing_reg:
                await query.edit_message_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
                return
            
            if event.is_full:
                await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration = Registration(
                user_id=user_obj.id,
                event_id=event_id
            )
            db.add(registration)
            db.commit()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            self.scheduler.add_reminder(user.id, event)
            
            message = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n"
            message += f"üìÖ {event.title}\n"
            message += f"üïê {event.event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
            message += f"üë• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {event.available_spots - 1}\n\n"
            message += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
            
            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        finally:
            db.close()
    
    async def handle_cancellation(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        registration_id = int(data.split("_")[1])
        db = next(get_db())
        
        try:
            registration = db.query(Registration).filter(Registration.id == registration_id).first()
            if not registration:
                await query.edit_message_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            event_title = registration.event.title
            db.delete(registration)
            db.commit()
            
            message = f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n"
            message += f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_title}\n"
            message += "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ."
            
            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        finally:
            db.close()
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if self.registration_flow.is_user_registering(user.id):
            message, reply_markup = self.registration_flow.process_step(user.id, text)
            
            if self.registration_flow.is_registration_complete(user.id):
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await self.complete_registration(user)
                self.registration_flow.clear_user_state(user.id)
            
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n"
                "/events - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                "/my_events - –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
                "/help - –ü–æ–º–æ—â—å"
            )
    
    async def handle_ai_experience_selection(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞ —Å –ò–ò"""
        message, reply_markup = self.registration_flow.process_ai_experience_callback(user.id, data)
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def complete_registration(self, user):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        db = next(get_db())
        try:
            user_data = self.registration_flow.get_user_data(user.id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_user.full_name = user_data.get('full_name')
                existing_user.company = user_data.get('company')
                existing_user.role = user_data.get('role')
                existing_user.ai_experience = user_data.get('ai_experience')
                existing_user.email = user_data.get('email')
                existing_user.is_profile_complete = 1
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    full_name=user_data.get('full_name'),
                    company=user_data.get('company'),
                    role=user_data.get('role'),
                    ai_experience=user_data.get('ai_experience'),
                    email=user_data.get('email'),
                    is_profile_complete=1
                )
                db.add(new_user)
            
            db.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            db.rollback()
        finally:
            db.close()
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            message = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            message += f"üìù –ò–º—è: {user_obj.full_name}\n"
            message += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_obj.company}\n"
            message += f"üíº –†–æ–ª—å: {user_obj.role}\n"
            message += f"ü§ñ –û–ø—ã—Ç —Å –ò–ò: {user_obj.ai_experience}\n"
            message += f"üìß Email: {user_obj.email}\n"
            message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_obj.registration_date.strftime('%d.%m.%Y')}"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        finally:
            db.close()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.app.run_polling() 