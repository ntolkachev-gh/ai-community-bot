import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from sqlalchemy.orm import Session
from database.models import User, Event, Registration, get_db
from config import Config
from bot.scheduler import NotificationScheduler
from bot.registration_flow import RegistrationFlow
import urllib.parse
import pytz

logger = logging.getLogger(__name__)

def convert_to_user_timezone(event_datetime, user_timezone='UTC'):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        event_datetime (datetime): –í—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ UTC
        user_timezone (str): –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –°–æ–∑–¥–∞–µ–º timezone –æ–±—ä–µ–∫—Ç
        user_tz = pytz.timezone(user_timezone)
        
        # –ï—Å–ª–∏ event_datetime –Ω–µ –∏–º–µ–µ—Ç timezone info, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ UTC
        if event_datetime.tzinfo is None:
            utc_tz = pytz.UTC
            event_datetime = utc_tz.localize(event_datetime)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_time = event_datetime.astimezone(user_tz)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        return user_time.strftime("%d.%m.%Y %H:%M")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –≤ UTC –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        return event_datetime.strftime("%d.%m.%Y %H:%M")

def generate_google_calendar_link(event_title, event_datetime, description="", location=""):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Calendar –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    
    Args:
        event_title (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_datetime (datetime): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        description (str): –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        location (str): –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è (—Å—Å—ã–ª–∫–∞ –Ω–∞ Zoom –∏ —Ç.–¥.)
    
    Returns:
        str: URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Google Calendar
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è Google Calendar
    start_time = event_datetime.strftime("%Y%m%dT%H%M%SZ")
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª–∏—Ç—Å—è 1 —á–∞—Å
    end_time = (event_datetime + timedelta(hours=1)).strftime("%Y%m%dT%H%M%SZ")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    full_description = description
    if location:
        full_description += f"\n\n–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {location}"
    
    # –ö–æ–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è URL
    params = {
        'action': 'TEMPLATE',
        'text': event_title,
        'dates': f"{start_time}/{end_time}",
        'details': full_description,
        'sf': 'true',
        'output': 'xml'
    }
    
    # –°–æ–∑–¥–∞–µ–º URL
    base_url = "https://calendar.google.com/calendar/render"
    query_string = urllib.parse.urlencode(params)
    calendar_url = f"{base_url}?{query_string}"
    
    return calendar_url

class TelegramBot:
    def __init__(self):
        self.bot_token = Config.BOT_TOKEN
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        self.app = Application.builder().token(self.bot_token).build()
        self.scheduler = NotificationScheduler(self.app.bot)
        self.registration_flow = RegistrationFlow()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("events", self.events_command))
        self.app.add_handler(CommandHandler("my_events", self.my_events_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("profile", self.profile_command))
        self.app.add_handler(CommandHandler("edit_profile", self.edit_profile_command))
        self.app.add_handler(CommandHandler("timezone", self.timezone_command))
        
        # Callback handlers
        self.app.add_handler(CallbackQueryHandler(self.button_handler))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db = next(get_db())
        try:
            existing_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if not existing_user:
                # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                message, reply_markup = self.registration_flow.start_registration(user.id)
                await update.message.reply_text(message, reply_markup=reply_markup)
            else:
                if existing_user.is_profile_complete:
                    message = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {existing_user.full_name or user.first_name}! üòä\n\n"
                    message += "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                    message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
                    message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üëã\n\n"
                    message += "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏–º:\n\n"
                    message += "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ø–æ–ª–Ω–æ–µ –∏–º—è)"
                    self.registration_flow.user_states[user.id] = {
                        'step': self.registration_flow.RegistrationStep.FULL_NAME,
                        'data': {}
                    }
                
                await update.message.reply_text(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await update.message.reply_text(message)
        finally:
            db.close()
    
    async def events_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            events = db.query(Event).filter(Event.event_datetime > datetime.utcnow()).order_by(Event.event_datetime.asc()).all()
            
            if not events:
                await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
                return
            
            message = "üóì **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:**\n\n"
            keyboard = []
            
            for i, event in enumerate(events, 1):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                event_date = convert_to_user_timezone(event.event_datetime, user_obj.timezone)
                spots_left = event.available_spots
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—É
                message += f"{i}. **{event.title}**\n"
                message += f"üïê {event_date}\n"
                message += f"üë• –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {spots_left}\n\n"
                
                # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                if not event.is_full:
                    button_text = f"–ó–∞–ø–∏—Å–∞—Ç—å—Å—è #{i}"
                    keyboard.append([InlineKeyboardButton(
                        button_text,
                        callback_data=f"register_{event.id}"
                    )])
                else:
                    button_text = f"‚ùå –ó–ê–ü–û–õ–ù–ï–ù–û #{i}"
                    keyboard.append([InlineKeyboardButton(
                        button_text,
                        callback_data=f"full_{event.id}"
                    )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        finally:
            db.close()
    
    async def my_events_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ –±—É–¥—É—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
            registrations = db.query(Registration).join(Event).filter(
                Registration.user_id == user_obj.id,
                Event.event_datetime > datetime.utcnow()
            ).order_by(Event.event_datetime.asc()).all()
            
            if not registrations:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
                return
            
            message = "üìã –í–∞—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"
            keyboard = []
            
            for reg in registrations:
                event = reg.event
                if not event:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    continue
                    
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                event_date = convert_to_user_timezone(event.event_datetime, user_obj.timezone)
                reg_date = reg.registration_time.strftime("%d.%m.%Y %H:%M")
                
                message += f"üìÖ {event.title}\n"
                message += f"üïê {event_date}\n"
                message += f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if event.webinar_link:
                    message += f"üîó {event.webinar_link}\n"
                
                message += "\n"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Calendar –¥–ª—è –∫–Ω–æ–ø–∫–∏
                calendar_link = generate_google_calendar_link(
                    event_title=event.title,
                    event_datetime=event.event_datetime,
                    description=event.description or "",
                    location=event.webinar_link or ""
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
                event_buttons = []
                
                # –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
                event_buttons.append(InlineKeyboardButton(
                    "üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                    url=calendar_link
                ))
                
                event_buttons.append(InlineKeyboardButton(
                    "–û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data=f"cancel_{reg.id}"
                ))
                
                keyboard.append(event_buttons)
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.")
        finally:
            db.close()
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
ü§ñ AI Community Bot - –ü–æ–º–æ—â—å

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
/edit_profile - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
/events - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
/my_events - –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
/timezone - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ (–∏–º—è, –∫–æ–º–ø–∞–Ω–∏—è, —Ä–æ–ª—å, –æ–ø—ã—Ç —Å –ò–ò, email)
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /events –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
4. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /my_events
6. –û—Ç–º–µ–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
7. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ /profile
8. –ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ /edit_profile

–ó–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!
        """
        await update.message.reply_text(help_text)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user = update.effective_user
        
        if data.startswith("register_"):
            await self.handle_registration(query, user, data)
        elif data.startswith("cancel_"):
            await self.handle_cancellation(query, user, data)
        elif data.startswith("full_"):
            await query.edit_message_text("–≠—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
        elif data.startswith("ai_exp_"):
            await self.handle_ai_experience_selection(query, user, data)
        elif data.startswith("timezone_"):
            await self.handle_timezone_selection(query, user, data)
        elif data.startswith("edit_"):
            await self.handle_profile_edit_selection(query, user, data)
    
    async def handle_registration(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
        event_id = int(data.split("_")[1])
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await query.edit_message_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            event = db.query(Event).filter(Event.id == event_id).first()
            if not event:
                await query.edit_message_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
            existing_reg = db.query(Registration).filter(
                Registration.user_id == user_obj.id,
                Registration.event_id == event_id
            ).first()
            
            if existing_reg:
                await query.edit_message_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
                return
            
            if event.is_full:
                await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
                return
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            registration = Registration(
                user_id=user_obj.id,
                event_id=event_id
            )
            db.add(registration)
            db.commit()
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            self.scheduler.add_reminder(user.id, event)
            
            message = f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n"
            message += f"üìÖ {event.title}\n"
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            event_date = convert_to_user_timezone(event.event_datetime, user_obj.timezone)
            message += f"üïê {event_date}\n"
            message += f"üë• –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {event.available_spots - 1}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if event.webinar_link:
                message += f"üîó {event.webinar_link}\n"
            
            message += "\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Calendar –¥–ª—è –∫–Ω–æ–ø–∫–∏
            calendar_link = generate_google_calendar_link(
                event_title=event.title,
                event_datetime=event.event_datetime,
                description=event.description or "",
                location=event.webinar_link or ""
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å"
            keyboard = [[InlineKeyboardButton(
                "üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å",
                url=calendar_link
            )]]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        finally:
            db.close()
    
    async def handle_cancellation(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        registration_id = int(data.split("_")[1])
        db = next(get_db())
        
        try:
            registration = db.query(Registration).filter(Registration.id == registration_id).first()
            if not registration:
                await query.edit_message_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            event_title = registration.event.title
            db.delete(registration)
            db.commit()
            
            message = f"‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n"
            message += f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_title}\n"
            message += "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ."
            
            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        finally:
            db.close()
    
    async def handle_timezone_selection(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        timezone_name = data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await query.edit_message_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                pytz.timezone(timezone_name)
            except pytz.exceptions.UnknownTimeZoneError:
                await query.edit_message_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_name}")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_obj.timezone = timezone_name
            db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            user_tz = pytz.timezone(timezone_name)
            current_time = datetime.now(user_tz).strftime("%H:%M")
            
            message = f"‚úÖ –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            message += f"üïê –ù–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone_name}\n"
            message += f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\n\n"
            message += "–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ."
            
            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.")
        finally:
            db.close()
    
    async def handle_profile_edit_selection(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        field = data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await query.edit_message_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not hasattr(self, 'edit_states'):
                self.edit_states = {}
            
            self.edit_states[user.id] = {
                'field': field,
                'user_id': user_obj.id
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
            field_messages = {
                'full_name': "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
                'company': "üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:",
                'role': "üíº –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
                'ai_experience': "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ò–ò:",
                'email': "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:"
            }
            
            message = field_messages.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
            
            if field == 'ai_experience':
                # –î–ª—è –æ–ø—ã—Ç–∞ —Å –ò–ò –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
                keyboard = [
                    [
                        InlineKeyboardButton("–ù–æ–≤–∏—á–æ–∫", callback_data="ai_exp_novice"),
                        InlineKeyboardButton("–ù–∞—á–∏–Ω–∞—é—â–∏–π", callback_data="ai_exp_beginner")
                    ],
                    [
                        InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="ai_exp_intermediate"),
                        InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="ai_exp_advanced")
                    ],
                    [
                        InlineKeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç", callback_data="ai_exp_expert")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(message, reply_markup=reply_markup)
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç
                await query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        finally:
            db.close()
    
    async def handle_profile_edit_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        user = update.effective_user
        text = update.message.text
        edit_state = self.edit_states[user.id]
        field = edit_state['field']
        user_id = edit_state['user_id']
        
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.id == user_id).first()
            if not user_obj:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è
            if field == 'email':
                # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
                if '@' not in text or '.' not in text:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                user_obj.email = text
            elif field == 'full_name':
                if len(text.strip()) < 2:
                    await update.message.reply_text("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                user_obj.full_name = text.strip()
            elif field == 'company':
                if len(text.strip()) < 2:
                    await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                user_obj.company = text.strip()
            elif field == 'role':
                if len(text.strip()) < 2:
                    await update.message.reply_text("‚ùå –†–æ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                    return
                user_obj.role = text.strip()
            
            db.commit()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            del self.edit_states[user.id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            message = "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            message += "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            message += f"üìù –ò–º—è: {user_obj.full_name}\n"
            message += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_obj.company}\n"
            message += f"üíº –†–æ–ª—å: {user_obj.role}\n"
            message += f"ü§ñ –û–ø—ã—Ç —Å –ò–ò: {user_obj.ai_experience}\n"
            message += f"üìß Email: {user_obj.email}\n"
            message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_obj.registration_date.strftime('%d.%m.%Y')}"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        finally:
            db.close()
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if hasattr(self, 'edit_states') and user.id in self.edit_states:
            await self.handle_profile_edit_input(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if self.registration_flow.is_user_registering(user.id):
            message, reply_markup = self.registration_flow.process_step(user.id, text)
            
            if self.registration_flow.is_registration_complete(user.id):
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await self.complete_registration(user)
                self.registration_flow.clear_user_state(user.id)
            
            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º:\n"
                "/events - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
                "/my_events - –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
                "/edit_profile - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                "/help - –ü–æ–º–æ—â—å"
            )
    
    async def handle_ai_experience_selection(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞ —Å –ò–ò"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if hasattr(self, 'edit_states') and user.id in self.edit_states:
            await self.handle_ai_experience_edit(query, user, data)
        else:
            # –û–±—ã—á–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            message, reply_markup = self.registration_flow.process_ai_experience_callback(user.id, data)
            await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def handle_ai_experience_edit(self, query, user, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞ —Å –ò–ò –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
        experience_level = data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
        edit_state = self.edit_states[user.id]
        user_id = edit_state['user_id']
        
        # –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π –æ–ø—ã—Ç–∞
        experience_mapping = {
            'novice': '–ù–æ–≤–∏—á–æ–∫',
            'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'intermediate': '–°—Ä–µ–¥–Ω–∏–π',
            'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
            'expert': '–≠–∫—Å–ø–µ—Ä—Ç'
        }
        
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.id == user_id).first()
            if not user_obj:
                await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç —Å –ò–ò
            user_obj.ai_experience = experience_mapping.get(experience_level, experience_level)
            db.commit()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            del self.edit_states[user.id]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            message = "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            message += "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            message += f"üìù –ò–º—è: {user_obj.full_name}\n"
            message += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_obj.company}\n"
            message += f"üíº –†–æ–ª—å: {user_obj.role}\n"
            message += f"ü§ñ –û–ø—ã—Ç —Å –ò–ò: {user_obj.ai_experience}\n"
            message += f"üìß Email: {user_obj.email}\n"
            message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_obj.registration_date.strftime('%d.%m.%Y')}"
            
            await query.edit_message_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞ —Å –ò–ò: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        finally:
            db.close()
    
    async def complete_registration(self, user):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        db = next(get_db())
        try:
            user_data = self.registration_flow.get_user_data(user.id)
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_user = db.query(User).filter(User.telegram_id == user.id).first()
            
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                existing_user.full_name = user_data.get('full_name')
                existing_user.company = user_data.get('company')
                existing_user.role = user_data.get('role')
                existing_user.ai_experience = user_data.get('ai_experience')
                existing_user.email = user_data.get('email')
                existing_user.is_profile_complete = 1
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    telegram_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name,
                    full_name=user_data.get('full_name'),
                    company=user_data.get('company'),
                    role=user_data.get('role'),
                    ai_experience=user_data.get('ai_experience'),
                    email=user_data.get('email'),
                    is_profile_complete=1
                )
                db.add(new_user)
            
            db.commit()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
            db.rollback()
        finally:
            db.close()
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            message = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            message += f"üìù –ò–º—è: {user_obj.full_name}\n"
            message += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {user_obj.company}\n"
            message += f"üíº –†–æ–ª—å: {user_obj.role}\n"
            message += f"ü§ñ –û–ø—ã—Ç —Å –ò–ò: {user_obj.ai_experience}\n"
            message += f"üìß Email: {user_obj.email}\n"
            message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_obj.registration_date.strftime('%d.%m.%Y')}"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        finally:
            db.close()
    
    async def edit_profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            message = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
            keyboard = [
                [
                    InlineKeyboardButton("üìù –ü–æ–ª–Ω–æ–µ –∏–º—è", callback_data="edit_full_name"),
                    InlineKeyboardButton("üè¢ –ö–æ–º–ø–∞–Ω–∏—è", callback_data="edit_company")
                ],
                [
                    InlineKeyboardButton("üíº –†–æ–ª—å", callback_data="edit_role"),
                    InlineKeyboardButton("ü§ñ –û–ø—ã—Ç —Å –ò–ò", callback_data="edit_ai_experience")
                ],
                [
                    InlineKeyboardButton("üìß Email", callback_data="edit_email")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        finally:
            db.close()
    
    async def timezone_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        user = update.effective_user
        db = next(get_db())
        
        try:
            user_obj = db.query(User).filter(User.telegram_id == user.id).first()
            if not user_obj:
                await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
                return
            
            if not user_obj.is_profile_complete:
                await update.message.reply_text("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if context.args:
                new_timezone = context.args[0]
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    pytz.timezone(new_timezone)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_obj.timezone = new_timezone
                    db.commit()
                    
                    message = f"‚úÖ –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_timezone}\n\n"
                    message += "–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ."
                    
                    await update.message.reply_text(message)
                    
                except pytz.exceptions.UnknownTimeZoneError:
                    await update.message.reply_text(
                        f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {new_timezone}\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞."
                    )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
                current_tz = user_obj.timezone or 'UTC'
                message = f"üïê –í–∞—à —Ç–µ–∫—É—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {current_tz}\n\n"
                message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
                keyboard = [
                    [
                        InlineKeyboardButton("üá∑üá∫ –ú–æ—Å–∫–≤–∞ (MSK)", callback_data="timezone_Europe/Moscow"),
                        InlineKeyboardButton("üá¨üáß –õ–æ–Ω–¥–æ–Ω (GMT)", callback_data="timezone_Europe/London")
                    ],
                    [
                        InlineKeyboardButton("üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫ (EST)", callback_data="timezone_America/New_York"),
                        InlineKeyboardButton("üá∫üá∏ –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (PST)", callback_data="timezone_America/Los_Angeles")
                    ],
                    [
                        InlineKeyboardButton("üáØüáµ –¢–æ–∫–∏–æ (JST)", callback_data="timezone_Asia/Tokyo"),
                        InlineKeyboardButton("üá®üá≥ –ü–µ–∫–∏–Ω (CST)", callback_data="timezone_Asia/Shanghai")
                    ],
                    [
                        InlineKeyboardButton("üá¶üá∫ –°–∏–¥–Ω–µ–π (AEST)", callback_data="timezone_Australia/Sydney"),
                        InlineKeyboardButton("üáÆüá≥ –ú—É–º–±–∞–∏ (IST)", callback_data="timezone_Asia/Kolkata")
                    ],
                    [
                        InlineKeyboardButton("üåç UTC (–í—Å–µ–º–∏—Ä–Ω–æ–µ –≤—Ä–µ–º—è)", callback_data="timezone_UTC")
                    ]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞.")
        finally:
            db.close()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.app.run_polling() 