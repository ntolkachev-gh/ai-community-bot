import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
import asyncio

logger = logging.getLogger(__name__)

class NotificationScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = BackgroundScheduler()
        
    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.scheduler.shutdown()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def add_reminder(self, user_id, event):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        reminder_time = event.event_datetime - timedelta(days=1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if reminder_time > datetime.utcnow():
            job_id = f"reminder_{user_id}_{event.id}"
            
            self.scheduler.add_job(
                func=self._send_reminder,
                trigger=DateTrigger(run_date=reminder_time),
                args=[user_id, event],
                id=job_id,
                replace_existing=True
            )
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {reminder_time}")
    
    def remove_reminder(self, user_id, event_id):
        """–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        job_id = f"reminder_{user_id}_{event_id}"
        try:
            self.scheduler.remove_job(job_id)
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")
    
    def _send_reminder(self, user_id, event):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            message = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!\n\n"
            message += f"üìÖ {event.title}\n"
            message += f"üïê –ó–∞–≤—Ç—Ä–∞ –≤ {event.event_datetime.strftime('%H:%M')}\n"
            message += f"üìù {event.description}\n\n"
            
            if event.webinar_link:
                message += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.webinar_link}\n\n"
            
            message += "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            asyncio.create_task(self.bot.send_message(chat_id=user_id, text=message))
            
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}") 