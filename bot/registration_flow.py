from enum import Enum
from typing import Dict, Any
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class RegistrationStep(Enum):
    """–®–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    FULL_NAME = "full_name"
    COMPANY = "company"
    ROLE = "role"
    AI_EXPERIENCE = "ai_experience"
    EMAIL = "email"
    COMPLETE = "complete"

class AIExperienceOption(Enum):
    """–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—ã—Ç–∞ —Å –ò–ò"""
    NO_AI_NO_NEED = "–ù–µ –∏—Å–ø–æ–ª—å–∑—É—é –ò–ò, –Ω–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏"
    NO_AI_WANT_TO = "–ù–µ –∏—Å–ø–æ–ª—å–∑—É—é –ò–ò, –Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã"
    BASIC_AI = "–ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (ChatGPT –∏ –¥—Ä—É–≥–∏–µ)"
    AI_AGENTS = "–°–æ–∑–¥–∞—é –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤"
    AI_PRODUCT = "–°–æ–∑–¥–∞—é –ò–ò-–ø—Ä–æ–¥—É–∫—Ç"
    INDUSTRIAL_AI = "–°–æ–∑–¥–∞—é –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –ò–ò-—Ä–µ—à–µ–Ω–∏—è"
    OTHER = "–ò–Ω–æ–µ"

class RegistrationFlow:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.user_states: Dict[int, Dict[str, Any]] = {}
    
    def start_registration(self, user_id: int) -> tuple[str, InlineKeyboardMarkup]:
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.user_states[user_id] = {
            'step': RegistrationStep.FULL_NAME,
            'data': {}
        }
        
        message = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Community!\n\n"
        message += "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ –≤–∞—Å.\n\n"
        message += "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ø–æ–ª–Ω–æ–µ –∏–º—è)"
        
        return message, None
    
    def process_step(self, user_id: int, text: str) -> tuple[str, InlineKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        if user_id not in self.user_states:
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å /start", None
        
        state = self.user_states[user_id]
        current_step = state['step']
        
        if current_step == RegistrationStep.FULL_NAME:
            return self._process_full_name(user_id, text)
        elif current_step == RegistrationStep.COMPANY:
            return self._process_company(user_id, text)
        elif current_step == RegistrationStep.ROLE:
            return self._process_role(user_id, text)
        elif current_step == RegistrationStep.AI_EXPERIENCE:
            return self._process_ai_experience(user_id, text)
        elif current_step == RegistrationStep.EMAIL:
            return self._process_email(user_id, text)
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", None
    
    def _process_full_name(self, user_id: int, text: str) -> tuple[str, InlineKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
        self.user_states[user_id]['data']['full_name'] = text
        self.user_states[user_id]['step'] = RegistrationStep.COMPANY
        
        message = f"–°–ø–∞—Å–∏–±–æ, {text}! üëã\n\n"
        message += "–í –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"
        
        return message, None
    
    def _process_company(self, user_id: int, text: str) -> tuple[str, InlineKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        self.user_states[user_id]['data']['company'] = text
        self.user_states[user_id]['step'] = RegistrationStep.ROLE
        
        message = f"–ö–æ–º–ø–∞–Ω–∏—è: {text} ‚úÖ\n\n"
        message += "–í –∫–∞–∫–æ–π —Ä–æ–ª–∏ –≤—ã —Ç–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"
        
        return message, None
    
    def _process_role(self, user_id: int, text: str) -> tuple[str, InlineKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ–ª–∏"""
        self.user_states[user_id]['data']['role'] = text
        self.user_states[user_id]['step'] = RegistrationStep.AI_EXPERIENCE
        
        message = f"–†–æ–ª—å: {text} ‚úÖ\n\n"
        message += "–ß—Ç–æ –±–ª–∏–∂–µ –≤–∞—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç?\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
        
        keyboard = []
        for option in AIExperienceOption:
            keyboard.append([InlineKeyboardButton(
                option.value,
                callback_data=f"ai_exp_{option.name}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        return message, reply_markup
    
    def _process_ai_experience(self, user_id: int, text: str) -> tuple[str, InlineKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞ —Å –ò–ò"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ callback
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", None
    
    def process_ai_experience_callback(self, user_id: int, callback_data: str) -> tuple[str, InlineKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞ —Å –ò–ò —á–µ—Ä–µ–∑ callback"""
        try:
            ai_exp_option = callback_data.split('_')[2]  # ai_exp_OPTION_NAME
            option = AIExperienceOption[ai_exp_option]
            self.user_states[user_id]['data']['ai_experience'] = option.value
            self.user_states[user_id]['step'] = RegistrationStep.EMAIL
            
            message = f"–û–ø—ã—Ç —Å –ò–ò: {option.value} ‚úÖ\n\n"
            
            if option == AIExperienceOption.OTHER:
                message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à e-mail –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Zoom:"
            else:
                message += "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ Zoom, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à e-mail:"
            
            return message, None
            
        except (KeyError, IndexError) as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {callback_data}, –æ—à–∏–±–∫–∞: {e}")
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞", None
    
    def _process_email(self, user_id: int, text: str) -> tuple[str, InlineKeyboardMarkup]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
        if '@' not in text or '.' not in text:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å:", None
        
        self.user_states[user_id]['data']['email'] = text
        self.user_states[user_id]['step'] = RegistrationStep.COMPLETE
        
        message = "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        message += "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        data = self.user_states[user_id]['data']
        message += f"üë§ –ò–º—è: {data['full_name']}\n"
        message += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        message += f"üíº –†–æ–ª—å: {data['role']}\n"
        message += f"ü§ñ –û–ø—ã—Ç —Å –ò–ò: {data['ai_experience']}\n"
        message += f"üìß Email: {data['email']}\n\n"
        message += "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        message += "/events - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n"
        message += "/my_events - –ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        message += "/help - –ü–æ–º–æ—â—å"
        
        return message, None
    
    def get_user_data(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if user_id in self.user_states:
            return self.user_states[user_id]['data']
        return {}
    
    def clear_user_state(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.user_states:
            del self.user_states[user_id]
    
    def is_user_registering(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        return user_id in self.user_states
    
    def is_registration_complete(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
        if user_id not in self.user_states:
            return False
        return self.user_states[user_id]['step'] == RegistrationStep.COMPLETE 