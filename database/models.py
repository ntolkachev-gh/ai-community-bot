from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Text, BigInteger, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
import os

Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    
    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, unique=True, nullable=False, index=True)
    username = Column(String(50), nullable=True)
    first_name = Column(String(100), nullable=True)
    last_name = Column(String(100), nullable=True)
    email = Column(String(255), nullable=True)
    registration_date = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑—å —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
    registrations = relationship("Registration", back_populates="user")
    
    def __repr__(self):
        return f"<User {self.telegram_id} - {self.first_name} {self.last_name}>"

class Event(Base):
    __tablename__ = 'events'
    
    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    event_datetime = Column(DateTime, nullable=False)
    webinar_link = Column(String(500), nullable=True)
    max_participants = Column(Integer, default=100)
    
    # –°–≤—è–∑—å —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏
    registrations = relationship("Registration", back_populates="event")
    
    @property
    def available_spots(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç"""
        return self.max_participants - len(self.registrations)
    
    @property
    def is_full(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"""
        return len(self.registrations) >= self.max_participants
    
    def __repr__(self):
        return f"<Event {self.id} - {self.title}>"

class Registration(Base):
    __tablename__ = 'registrations'
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    event_id = Column(Integer, ForeignKey('events.id'), nullable=False)
    registration_time = Column(DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    user = relationship("User", back_populates="registrations")
    event = relationship("Event", back_populates="registrations")
    
    def __repr__(self):
        return f"<Registration {self.id} - User {self.user_id} -> Event {self.event_id}>"

def get_database_url():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è Heroku"""
    database_url = os.getenv('DATABASE_URL')
    
    if not database_url:
        # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite
        print("üîó –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite")
        return 'sqlite:///./test.db'
    
    # Heroku –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ postgres://, –Ω–æ SQLAlchemy 1.4+ —Ç—Ä–µ–±—É–µ—Ç postgresql://
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
        print("üîó Heroku PostgreSQL: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω postgres:// -> postgresql://")
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {database_url.split('@')[0]}@***")
    return database_url

# –°–æ–∑–¥–∞–Ω–∏–µ engine —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π URL
database_url = get_database_url()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ engine –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ë–î
if database_url.startswith('sqlite'):
    # SQLite –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    engine = create_engine(
        database_url,
        echo=False
    )
else:
    # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Heroku
    engine = create_engine(
        database_url,
        pool_pre_ping=True,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        pool_recycle=300,    # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        echo=False
    )

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
    try:
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        raise

def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
